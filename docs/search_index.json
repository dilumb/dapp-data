[["index.html", "A Collection of Resources for Process Mining on Blockchain Data Overview", " A Collection of Resources for Process Mining on Blockchain Data Dilum Bandara, CSIRO Data61 Hendrik Bockrath, TU Berlin Richard Hobeck, TU Berlin Christopher Klinkmüller, CSIRO Data61 Luise Pufahl, TU Berlin Martin Rebesky, TU Berlin Wil van der Aalst, RWTH Aachen Ingo Weber, TU Berlin Overview This is a repository of event logs of decentralized applications (DApps) deployed on public blockchain networks. The event logs contain historic information about events that occurred during the execution of the DApps. Currently, the collection contains logs for the following Ethereum-based DApps: Augur: a prediction and betting marketplace; Forsage: an investment application, which turns out to be a PONZI scheme; CryptoKitties: a game where virtual cats can be bred and traded as assets; and ChickenHunt: a game for hunting chickens. All event logs from this collection follow the IEEE XES standard and were extracted using the Ethereum Logging Framework (ELF). In addition to the event log data, this website provides a description of the data in the event logs, pointers to DApp documentations, links to ELF scripts used for data extraction, and insights obtained from a preliminary analyses for each DApp event log. We invite users to contribute their own data sets to this collection. Data sets can be contributed via pull requests to our github repository. This collection is part of our work on process mining for blockchain-based applications. Details can be found in the following publications: C. Klinkmüller, A. Ponomarev, A.B. Tran, I. Weber, W. van der Aalst (2019): Mining blockchain processes: Extracting process mining data from blockchain applications. In: International Conference on Business Process Management (Blockchain Forum). C. Klinkmüller, I. Weber, A. Ponomarev, A.B. Tran, W. van der Aalst (2019): Efficient logging for blockchain application. https://arxiv.org/abs/2001.10281 R. Hobeck, C. Klinkmüller, H.M.N.D. Bandara, I. Weber and W. Van der Aalst (2021): Process Mining on Blockchain Data: A Case Study of Augur. In: International Conference on Business Process Management. "],["augur.html", "1 Augur 1.1 Data Overview 1.2 Preliminary Analysis", " 1 Augur DApp Homepage: https://augur.net DApp Source Code: https://github.com/AugurProject/augur-core ELF Script: Augur.ethql Event Log: Augur.xes Process: Augur.bpmn Augur is a betting platform and prediction marketplace that is implemented as a set of smart contracts on the public Ethereum blockchain. Augurs white paper characterizes the mechanics of a prediction and betting market: individuals can speculate on the outcomes of future events; those who forecast the outcome correctly win money, and those who forecast incorrectly lose money. As a betting market organized on Ethereum, the developers claim that Augur bypasses disadvantages of traditional betting markets, such as trusted market operator and limited participation. 1.1 Data Overview Each trace in the Augur log captures the events that occur in relation to a specific betting market. Each trace has the following attributes: marketType (xs:string) - The type of the market: yes/no-markets deal with binary questions, while categorical and scalar markets expect discrete and numeric answers description (xs:string) - A description of the bet or question that is asked extraInfo (xs:string) - Additional informatio about the bet or question minPrice (xs:int) - The minimum price for the answer maxPrice (xs:int) - The maximum price for the answer In addition, each event has a set of standard attributes: concept:name (xs:string) - The class of the event time:timestamp (xs:date) - The timestamp of the block that included the event lifecycle:transition (xs:string) - the lifecycle transition of each event, for all events set to Completed by default. This attribute exists to ensure compatibility with XES-certified tools blockNumber (xs:int) - The number of the block that included the event requester (xs:string) - The address of the transaction sender receivingContract (xs:string) - The address of the transaction recipient (typically of an Augur contract) txIndex (xs:int) - The index of the transaction that included the event txHash (xs:string) - The hash of the transaction that included the event txSuccessful (xs;boolean) - A flag indicated whether the transaction was successfully executed logRemoved (xs:boolean) - A flag indicated whether the log was removed gas (xs:int) - The amount of gas set as the gas limit by the transaction requester gasUsed (xs:int) - The amount of gas that was consumed by the transaction gasPaid (xs:int) - The amount of Ether that was paid for the execution of the transaction gasPrice (xs:int) - The gas price set by the transaction sender universe (xs:string) - The address of the Augur instance in which the event occurred The following events can occur during a markets lifetime: create market - The betting market is initialized creator (xs:string) - The address of the market creator creationFee (xs:int) - The price paid for the creation of the market submit initial report - An initial answer for the betting market is submitted reporter (xs:string) - The address of the reporter providing the answer amountStaked (xs:int) - The amount of reputation token owned by the reporter isDesignatedReporter (xs:boolean) - A flag indicating whether the reporter was the initally assigned reporter invalid (xs:boolean) - A flag indicating whether the answer was flagged as INVALID by the reporter purchase complete sets - A user invests in an anticipated answer account (xs:string) - The address of the user who buys shares numCompleteSets (xs:int) - The number of shares that are bought create dispute - A discussion about a provided answer is started disputeCrowdsourcer (xs:string) - The address of the user who creates the dispute size (xs:int) - The amount of reputation token owned by the reporter invalid (xs:boolean) - A flag indicating whether the answer was flagged as INVALID by the reporter contribute to dispute - A user adds to a discussion about a provided answer reporter (xs:string) - The address of the user who contributes to the answer disputeCrowdsourcer (xs:string) - The address of the user who is targeted in the dispute amountStaked (xs:int) - The amount of staked reputation redeem dispute crowdsourcer - A user tries to obtain his or her revenue from the dispute reporter (xs:string) - The address of the user disputeCrowdsourcer (xs:string) - The address of the user initiating the transaction amountRedeemed (xs:int) - The amount of redeemed Ether repReceived (xs:int) - The amount of received reputation reportingFeesReceived (xs:int) - The amount of received reporting fees complete dispute - A discussion about a provided answer is closed disputeCrowdsourcer as xs:string disputeCrowdsourcer, finalize market - The betting market is closed claim trading proceeds - A user tries to obtain his or her revenue from the investment into an answer shareToken (xs:string) - The address of the share token sender (xs:string) - The address of the user numShares (xs:int) - The number of claimed shares numPayoutTokens (xs:int) - The number of shares that the user owns finalTokenBalance (xs:int) - The share balance of the user after the update redeem as initial reporter - A user tries to obtain his or her revenue for providing the initial answer reporter (xs:string) - The address of the reporter amountRedeemed (xs:int) - The amount of redeemed Ether repReceived (xs:int) - The amount of redeemed Reputation reportingFeesReceived (xs:int) - The amount of redeemed reporting fees transfer market - The betting market is transferred from one to another user from (xs:string) - The address of the previous market owner to (xs:string) - The address of the new market owner 1.2 Preliminary Analysis We conducted a case study on process mining for data extracted from Augur in [1]. To this end, we used process mining methods and tools to explore the data, discover models for a set of variants, and conduct conformance checking and performance analyses. In this regard, we found that the implementation diverged from the documented architecture of the DApp and identified interesting deviations from the normative process. An interview the chief architect of Augur validated our insights and more generally confirmed the usefulness of such insights for DApp development. References [1] R. Hobeck, C. Klinkmüller, H.M.N.D. Bandara, I. Weber and W. Van der Aalst (2021): Process Mining on Blockchain Data: A Case Study of Augur. In: International Conference on Business Process Management. "],["forsage.html", "2 Forsage 2.1 Data Overview 2.2 Preliminary Analysis", " 2 Forsage DApp Homepage: https://forsage.io DApp Source Code: available on etherscan.io ELF Script: Forsage.ethql Event Log: TODO On their website, the developers of Forsage describe the DApp as a Decentralized networking platform based on smart contracts that connects people from all over the world and opens up the limitless possibilities of the new economic financial system. However, detailed analyses of the DApps mechanics, e.g., in [1], have shown that the DApp is in fact a Ponzi scheme, i.e., a fraud in which a few early investors generate profits based on the investments of later inverstors (see Wikipedia). On etherscan.io the DApp is currently marked as high risk with a note that this DApp is a Ponzi scheme. 2.1 Data Overview Each trace in the forsage log captures the events from the lifecycle of a Forsage user. Each trace has the following attributes: concept:name (xs:string) - the address of the Forsage user In addition, each event has a set of standard attributes: concept:name (xs:string) - The class of the event time:timestamp (xs:date) - The timestamp of the block that included the event lifecycle:transition (xs:string) - The lifecycle transition of each event, for all events set to Completed by default. This attribute exists to ensure compatibility with XES-certified tools blockNumber (xs:int) - The number of the block that included the event transactionIndex (xs:int) - The index of the transaction that included the event logIndex (xs:int) - The index of the log that included the event The following events can occur during the life of a Forsage user: Register As User - The user is registering an account referrer (xs:string) - The address of the referring Forsage user userId (xs:int) - The internal id of the new Forsage user Refer New User - The user is referring a new user who created an account user (xs:string) - The address of the new Forsage user userId (xs:int) - The internal id of the new Forsage user Reinvest Matrix-1 - The user triggers a reinvest level (xs:int) - The level of the user currentReferrer (xs:string) - The address of the referrer receiving reinvest. This is the userss referrer, if it has activated the level receiving the reinvest, otherwise a randomly selected referrer. caller (xs:string) - The address of user triggering the rein- vest Reinvest Matrix-2 - The user triggers a reinvest level (xs:int) - The level of the user currentReferrer (xs:string) - The address of the referrer receiving reinvest. This is the users referrer, if this referrer has activated the level receiving the reinvest, otherwise a randomly selected referrer. caller (xs:string) - The address of user triggering the reinvest Upgrade Matrix-1 - level (xs:int) - referrer (xs:string) - Upgrade Matrix-2 - level (xs:int) - referrer (xs:string) - New User-Place Matrix-1 referrer (xs:string) - level (xs:int) - place (xs:int) - New User-Place Matrix-2 referrer (xs:string) - level (xs:int) - place (xs:int) - Missed Eth-Receive Matrix-1 from (xs:string) - level (xs:int) - Missed Eth-Receive Matrix-2 from (xs:string) - level (xs:int) - Received Extra Eth-Dividends Matrix-1 from (xs:string) - level (xs:int) - Recieved Extra Eth-Dividends Matrix-2 from (xs:string) - level (xs:int) - 2.2 Preliminary Analysis Forsage is a pyramide and Ponzi scheme implemented in a set of Ethereum smart contracts. The basic building blocks of the ponzi scheme referral system are so called matrizes. Matrix slots that users (referrers) create can be taken by other users (referees) by paying a fee. Fees are transferred upstream through the reference system. The key events for selling or buying a matrix slot are New User-Place Matrix-1 and New User-Place Matrix-2. The log has a size of ~6GB and contains 1,055,931 cases with 13,368,052 events. For the preliminary analysis, we hence only considered transactions between block 11280000 and 12243999 (934903 events, 72416 cases). Each case represents the trace of one registered user. The event log as-is specifies the referees ID for the events; to see beneficiaries of those events, we reassigned the referrers IDs to matrix-slot events and thus slightly altered the case IDs. We also filtered for cases that start with registering in Forsage as a user. As a result, the above Figure shows two major findings for 37% of the cases. Firstly, 45% of the users only register (pay fees) without making any income. Secondly, in the short run users who upgrade their matrices (pay fees to referrers) right after registration have a lower number of references (payouts) than users who do not upgrade right after registration. For the same log extract, we also analyzed how often users are referred to and how often users are referees. Note that the income from being referred to is at most 0.025 ETH, while the cost of creating an event is usually 0.05 ETH. That means the ratio of being referee to being referrer should at least be 2 to break even. Of the 42738 unique user IDs only 5448 (12.7%) reached that goal, the rest of the observed users lost Ether. This observation is in line with the observations from Kell et al. [1]. In their analysis, Kell et al. deployed the Forsage smart contract in a test environment and excercised it with simulated load. By examining the generated event logs, Kell et al found that 88% of the Forsage users loose their investment, while only a small number of top-level participants is realizing gains. References [1] T. Kell, H. Yousaf, S. Allen, S. Meiklejohn and A. Juels (2021): Forsage: Anatomy of a Smart-Contract Pyramid Scheme. https://arxiv.org/abs/2105.04380 "],["cryptokitties.html", "3 CryptoKitties 3.1 Data Overview 3.2 Preliminary Analysis", " 3 CryptoKitties DApp Homepage: https://www.cryptokitties.co DApp Source Code: available on etherscan.io ELF Script: CryptoKitties.ethql Event Log: TODO According to the DApps website, CryptoKitties is a game centered around breedable, collectible, and oh-soadorable creatures we call CryptoKitties. While not Ethereums most serious application, it is a well-known example of a DApp (that is primarily based on smart contracts), has been used heavily at times (likely due some of the kitties being sold for thousands of dollars), and has been in operation since December 2017. A CryptoKitty is the Ethereum version of a Tamagotchi. It is a digital asset owned by an Ethereum account, it can be traded, and it can breed new CryptoKitties. To breed a new CryptoKitty, the owner of a CryptoKitty can start a siring process. That is, the owners CryptoKitty acts as the matron that gives birth to the new CryptoKitty which will then be owned by the matrons owner. However, the owner must have access to a second cat, the sire, either by owning it or by obtaining the permission of the sires owner in a siring auction. A CryptoKitty is represented by an identifier and its DNA, from which its features and appearance are derived. 3.1 Data Overview Each trace in the CryptoKitties log captures the events from the life of a single CryptoKitty. Each trace has the following attributes: concept:name (xs:string) - The identifier of the CryptoKitty matronId (xs:string) - The identifier of the CryptoKittys matron sireId (xs:string) - The identifier of the CryptoKittys sire genes (xs:int) - The CryptoKittys DNA In addition, each event has a set of standard attributes: concept:name (xs:string) - The class of the event time:timestamp (xs:date) - The timestamp of the block that included the event lifecycle:transition (xs:string) - The lifecycle transition of each event, for all events set to Completed by default. This attribute exists to ensure compatibility with XES-certified tools blockNumber (xs:int) - The number of the block that included the event transactionIndex (xs:int) - The index of the transaction that included the event logIndex (xs:int) - The index of the log that included the event The following events can occur during the life of a CrypotKitty: Is Born - The birth of a CryptoKitty owner (xs:string) - The owner of the CryptoKitty Conceive as Matron - The CryptoKitty becomes pregnant sireId (xs:string) - The id of the CryptoKitty that is the sire Conceive as Sire - The CryptoKitty contributes to the pregnancy of a matron matronId (xs:string) - The id of the CryptoKitty that is the matron Give Birth as Matron - The CryptoKitty becomes the matron of another CryptoKitty kittyId (xs:string) - The id of the CryptoKitty that was born sireId (xs:string) - The id of the CryptoKitty that is the sire Give Birth as Sire - The CryptoKitty becomes the sire of another CryptoKitty kittyId (xs:string) - The id of the CryptoKitty that was born matronId (xs:string) - The id of the CryptoKitty that is the matron Put Up for Sale Auction - The owner wants to sell the CryptoKitty startingPrice (xs:int) - The price (in wei) at the beginning of the auction endingPrice (xs:int) - The price (in wei) at which the auction will end duration (xs:int) - The duration for which the auction is running Complete Sale Auction - The sale auction is successfully completed totalPrice (xs:int) - The price paid for the CryptoKitty winner (xs:string) - The new owner of the CryptoKitty Cancel Sale Auction - The sale auction is aborted Put Up for Siring Auction - The owner offers his or her CryptoKitty for siring startingPrice (xs:int) - The price (in wei) at the beginning of the auction endingPrice (xs:int) - The price (in wei) at which the auction will end duration (xs:int) - The duration for which the auction is running Complete Siring Auction - The siring auction is successfully completed totalPrice (xs:int) - The price paid for the CryptoKitty winner (xs:string) - The owner of the matron who is looking for a sire Cancel Siring Auction - The siring auction is aborted Is Transferred - The ownership of a CryptoKitty changes from (xs:string) - The previous owner of the CryptoKitty to (xs:string) - The new owner of the CryptoKitty 3.2 Preliminary Analysis We presented a preliminary analysis of CryptoKitties in [1] where we extracted event logs for two short time windows in the CryptoKitties lifecycle, the genesis log covering the period after DApp creation and the everyday log stemming from a later period after the DApp became popular. In the analysis, we used process discovery to contrast the DApps behavior in these two periods. As the above figure shows, in the genesis period the DApp was solely used by the CryptoKitty developer who generated a set of CryptoKitties. Later on, when the DApp was used by normal users, we observed that users bred and traded CryptoKitties. Such an analysis can provide valuable insights into the user behavior, which can inform DApp developers about improvement opportunities. In contrast to two logs that we used in the initial analysis, the event log provided on this page contains data about all CryptoKitty events that occurred in between blocks 4605167 (the creation block) and 12243999 (the block at which data extraction finished). References [1] C. Klinkmüller, A. Ponomarev, A.B. Tran, I. Weber, W. van der Aalst: Mining blockchain processes (2019): Extracting process mining data from blockchain applications. In: International Conference on Business Process Management (Blockchain Forum). "],["chickenhunt.html", "4 ChickenHunt 4.1 Data Overview 4.2 Preliminary Analysis", " 4 ChickenHunt DApp Homepage: https://chickenhunt.io/ DApp Source Code: available on etherscan.io ELF Script: ChickenHunt.ethql Event Log: TODO ChickenHunt is an incremental game that is deployed as a DApp on Ethereum. The games goal is to collect chickens through farming and attacking other players. Players also have the option to upgrade the attack (Upgrade Hunter), defense (Upgrade Depot), and collection capabilities (Upgrade Pet) of their avatars. The gas costs for the Ethereum transactions are paid by the player. The game concept includes two types of incentives for playing. Shareholder: through certain transactions, players can become shareholders of the game; and financial reward: players can sacrifice collected chickens for Ether. 4.1 Data Overview Each trace in the ChickenHunt log captures the events that occur during the game of a ChickenHunt player, i.e., the actions that a ChickenHunt player takes or is part of when playing the game. Each trace has the following attributes: concept:name (xs:string) - The address of the ChickenHunt player In addition, each event has a set of standard attributes: concept:name (xs:string) - The class of the event time:timestamp (xs:date) - The timestamp of the block that included the event lifecycle:transition (xs:string) - the lifecycle transition of each event, for all events set to Completed by default. This attribute exists to ensure compatibility with XES-certified tools blockNumber (xs:int) - The number of the block that included the event transactionIndex (xs:int) - The index of the transaction that included the event logIndex (xs:int) - The index of the log that included the event The following events can occur during the a players game: Join ChickenHunt - The player joins the game Receive Ethereum from Altar - The player receives Ethereum based on the number of chicken that her or she brought to the altar altarRecord (xs:int) - The period for which the Ethereum is paid out ethereum (xs:int) - The amount of Ether that the player receives Bring Chicken to Altar - The player brings hunted chicken to the altar altarRecord (xs:int) - The period in which the chicken where brought to the altar chicken (xs:int) - The number of chicken Attack Hunter - The player attacks another player to steal chicken defender (xs:string) - The player that gets attacked booty (xs:int) - The number of chicken that were stolen Suffer an Attack - The player must defend against an attack by another player attacker (xs:string) - The player that is attacking booty (xs:int) - The number of chicken that were lost to the attacker Buy Item - The player purchases an item that improves his abilities seller (xs:string) - The account that sells the item item (xs:int) - The id of the item class that the player purchased cost (xs:int) - The amount paid for the item Sell Item - The player sells an item buyer (xs:string) - The account that purchased the item item (xs:int) - The id of the item class that the player purchased cost (xs:int) - The amount paid for the item Upgrade Hunter - The player improves the abilities of his or her hunter attribute (xs:string) - The attribute of the hunter that is improved amount (xs:int) - The amount by which the attribute is increased Upgrade Depot - The player improves his or her depot amount (xs:int) - The amount by which the depot is increased Upgrade Pet - The player improves the abilities of one of his or her pets pet (xs:int) - The index of the pet whose abilities are improved amount (xs:int) - The amount by which the pets abilities are improved Buy Store - The player buys a store from another player seller (xs:string) - The player who sells the store cost (xs:int) - The amount paid for the store Sell Store - The player sells a store to another player buyer (xs:string) - The player who buys the store cost (xs:int) - The amount paid for the store Redeem Shares - The player (or the game) cashes out shares shares (xs:int) - The shares that are cashed out dividends (xs:int) - The dividends received Transfer Shares - The player (or the game) transfers shares to another player shares (xs:int) - The shares that are transferred buyer (xs:string) - The player that receives the shares Receive Shares - The player receives shares from the game or another player shares (xs:int) - The shares that are received seller (xs:string) - The contract the pays out the shares Receive Shares Approval - The player receives approval to spend shares of another account owner (xs:string) - The owner of the shares shares (xs:int) - The shares that are approved for spending Provide Shares Approval - The player allows another player to spend hhis or her shares spender (xs:string) - The nominated spender for the shares shares (xs:int) - The shares that are approved for spending 4.2 Preliminary Analysis We have loaded the event log into several process mining tools to analyze the players behavior, but here focus on results obtained with ProM. In the figure below, the most common behavior of players is shown: 107 players out of the 715 cases join chicken hunt and never do anything else. Several frequent traces show players joining, and being attacked (one or more times) without doing anything else. Some players follow a similar pattern, but first they succeed with bringing chick-ens to the altar. These insights could help understand why players stop early, and be used by the developers when working on improvements. Players who are more actively playing the game have highly varied individual traces: 402 distinct traces exist for the 715 cases. In the directly follows graph shown below, we analyzed the order and frequency of the different types of upgrades. Upgrading the hunter avatar is clearly the most popular choice, and by far the most frequent first and last upgrade. In other words, active players may also upgrade their pet and their depot, but they typically come back to further upgrade their hunter. These insights, too, appear to be of value for the providers of such a game. Next, we direct our attention to attack behavior. The dotted chart below shows only the events from joining, attacking, and suffering from an attack. It can be observed that only few players attack others, but a large number of players are suffering from attacks. Additionally, the attacks appear to happen in synchronized waves, as indicated by the vertical patterns in the dotted chart. The reasons behind those waves may well be connected to the gas prices (and accordingly the fees) per transaction on Ethereum (see e.g., etherscan): from a visual comparison of the time lines, higher gas prices on Ethereum may well correlate with periods without attacks on ChickenHunt. Presumably the attackers stole chickens from ordinary users, brought them to the altar, and received Ether in return, all of which entailing transactions with associated fees. If the returns in Ether are not high enough, the fees may well render this operation a financial loss. "]]
