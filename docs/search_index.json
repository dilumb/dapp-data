[["index.html", "A Collection of DApp Event Logs Overview", " A Collection of DApp Event Logs Overview This is a repository of event logs of decentralized applications (DApps) deployed on public blockchain networks. The event logs contain historic information about events that occurred during the execution of the DApps. Currently, the collection contains logs for the following Ethereum-based DApps: Augur: a prediction and betting marketplace; Forsage: an investment application, which turns out to be a PONZI scheme; CryptoKitties: a game where virtual cats can be bred and traded as assets; and ChickenHunt: a game for hunting chickens. All event logs from this collection follow the IEEE XES standard and were extracted using the Ethereum Logging Framework (ELF). In addition to the event log data, this website provides a description of the data in the event logs, pointers to DApp documentations, links to ELF scripts used for data extraction, and insights obtained from a preliminary analyses for each DApp event log. This collection is part of our work on process mining for blockchain-based applications. Details can be found in the following publications: C. Klinkm端ller, A. Ponomarev, A.B. Tran, I. Weber, W. van der Aalst (2019): Mining blockchain processes: Extracting process mining data from blockchain applications. In: International Conference on Business Process Management (Blockchain Forum). C. Klinkm端ller, I. Weber, A. Ponomarev, A.B. Tran, W. van der Aalst (2019): Efficient logging for blockchain application. https://arxiv.org/abs/2001.10281 R. Hobeck, C. Klinkm端ller, H.M.N.D. Bandara, I. Weber and W. Van der Aalst (2021): Process Mining on Blockchain Data: A Case Study of Augur. In: International Conference on Business Process Management. "],["augur.html", "1 Augur 1.1 Data Overview 1.2 Preliminary Analysis", " 1 Augur DApp Homepage: https://augur.net DApp Source Code: https://github.com/AugurProject/augur-core ELF Script: Augur.ethql Event Log: Augur.xes Process: Augur.bpmn Augur is a betting platform and prediction marketplace that is implemented as a set of smart contracts on the public Ethereum blockchain. Augurs white paper characterizes the mechanics of a prediction and betting market: individuals can speculate on the outcomes of future events; those who forecast the outcome correctly win money, and those who forecast incorrectly lose money. As a betting market organized on Ethereum, the developers claim that Augur bypasses disadvantages of traditional betting markets, such as trusted market operator and limited participation. 1.1 Data Overview Each trace in the Augur log captures the events that occur in relation to a specific betting market. Each trace has the following attributes: marketType (xs:string) - description (xs:string) - minPrice (xs:int) - maxPrice (xs:int) - blockNumber (xs:int) - time:timestamp (xs:date) - extraInfo (xs:string) - In addition, each event has a set of standard attributes: concept:name (xs:string) - The class of the event time:timestamp (xs:date) - The timestamp of the block that included the event lifecycle:transition (xs:string) - the lifecycle transition of each event, for all events set to Completed by default. This attribute exists to ensure compatibility with XES-certified tools blockNumber (xs:int) - The number of the block that included the event txIndex (xs:int) - The index of the transaction that included the event logIndex (xs:int) - The index of the log that included the event gasUsed (xs:int) - The amount of gas that was consumed by the transaction gasPaid (xs:int) - The amount of Ether that was paid for the execution of the transaction The following events can occur during a markets lifetime: create market - purchase complete sets - submit initial report - create dispute - contribute to dispute - redeem dispute crowdsourcer - complete dispute - finalize market - claim trading proceeds - redeem as initial reporter - transfer market - 1.2 Preliminary Analysis We conducted a case study on process mining for data extracted from Augur in [1]. To this end, we used process mining methods and tools to explore the data, discover models for a set of variants, and conduct conformance checking and performance analyses. In this regard, we found that the implementation diverged from the documented architecture of the DApp and identified interesting deviations from the normative process. An interview the chief architect of Augur validated our insights and more generally confirmed the usefulness of such insights for DApp development. References [1] R. Hobeck, C. Klinkm端ller, H.M.N.D. Bandara, I. Weber and W. Van der Aalst (2021): Process Mining on Blockchain Data: A Case Study of Augur. In: International Conference on Business Process Management. "],["forsage.html", "2 Forsage 2.1 Data Overview 2.2 Preliminary Analysis", " 2 Forsage DApp Homepage: https://forsage.io DApp Source Code: available on etherscan.io ELF Script: Forsage.ethql Event Log: TODO On their website, the developers of Forsage discribe the DApp as a Decentralized networking platform based on smart contracts that connects people from all over the world and opens up the limitless possibilities of the new economic financial system. However, detailed analysis of the DApps mechanics, e.g., in [1], have shown that the DApp is in fact a Ponzi scheme, i.e., a fraud in which a few early investors generate profits based on the investments of later inverstors (see Wikipedia). On etherscan.io the DApp is currently marked as high risk with a note that this DApp is a Ponzi scheme. 2.1 Data Overview Each trace in the forsage log captures the events from the lifecycle of a Forsage user. Each trace has the following attributes: concept:name (xs:string) - the address of the Forsage user In addition, each event has a set of standard attributes: concept:name (xs:string) - The class of the event time:timestamp (xs:date) - The timestamp of the block that included the event lifecycle:transition (xs:string) - The lifecycle transition of each event, for all events set to Completed by default. This attribute exists to ensure compatibility with XES-certified tools blockNumber (xs:int) - The number of the block that included the event transactionIndex (xs:int) - The index of the transaction that included the event logIndex (xs:int) - The index of the log that included the event The following events can occur during the life of a Forsage user: Register As User - The user is registering an account referrer (xs:string) - The address of the referring Forsage user userId (xs:int) - The internal id of the new Forsage user Refer New User - The user is referring a new user who created an account user (xs:string) - The address of the new Forsage user userId (xs:int) - The internal id of the new Forsage user Reinvest Matrix-1 - The user triggers a reinvest level (xs:int) - The level of the user currentReferrer (xs:string) - The address of the referrer receiving reinvest. This is the userss referrer, if it has activated the level receiving the reinvest, otherwise a randomly selected referrer. caller (xs:string) - The address of user triggering the rein- vest Reinvest Matrix-2 - The user triggers a reinvest level (xs:int) - The level of the user currentReferrer (xs:string) - The address of the referrer receiving reinvest. This is the users referrer, if this referrer has activated the level receiving the reinvest, otherwise a randomly selected referrer. caller (xs:string) - The address of user triggering the reinvest Upgrade Matrix-1 - level (xs:int) - referrer (xs:string) - Upgrade Matrix-2 - level (xs:int) - referrer (xs:string) - New User-Place Matrix-1 referrer (xs:string) - level (xs:int) - place (xs:int) - New User-Place Matrix-2 referrer (xs:string) - level (xs:int) - place (xs:int) - Missed Eth-Receive Matrix-1 from (xs:string) - level (xs:int) - Missed Eth-Receive Matrix-2 from (xs:string) - level (xs:int) - Received Extra Eth-Dividends Matrix-1 from (xs:string) - level (xs:int) - Recieved Extra Eth-Dividends Matrix-2 from (xs:string) - level (xs:int) - 2.2 Preliminary Analysis An extensive evaluation of the publicly available Forsage source code was presented in [1] where Kell et al. deployed the Forsage smart contract in a test environment and excercised it with simulated load. In their analysis, Kell et al. examine the generated event logs in detail, amongst others using a state machine to visualise the behavior of the contract, resulting in an estimation that around 88% of the Forsage users loose their investment, while only a small number of top-level participants is realizing gains. Complementary to the analysis by Kell et al., we here provide the historic information about the behavior of Forsage users. References [1] T. Kell, H. Yousaf, S. Allen, S. Meiklejohn and A. Juels (2021): Forsage: Anatomy of a Smart-Contract Pyramid Scheme. https://arxiv.org/abs/2105.04380 "],["cryptokitties.html", "3 CryptoKitties 3.1 Data Overview 3.2 Preliminary Analysis", " 3 CryptoKitties DApp Homepage: https://www.cryptokitties.co DApp Source Code: available on etherscan.io ELF Script: CryptoKitties.ethql Event Log: TODO According to the DApps website, CryptoKitties is a game centered around breedable, collectible, and oh-soadorable creatures we call CryptoKitties. While not Ethereums most serious application, it is a well-known example of a DApp (that is primarily based on smart contracts), has been used heavily at times (likely due some of the kitties being sold for thousands of dollars), and has been in operation since December 2017. A CryptoKitty is the Ethereum version of a Tamagotchi. It is a digital asset owned by an Ethereum account, it can be traded, and it can breed new CryptoKitties. To breed a new CryptoKitty, the owner of a CryptoKitty can start a siring process. That is, the owners CryptoKitty acts as the matron that gives birth to the new CryptoKitty which will then be owned by the matrons owner. However, the owner must have access to a second cat, the sire, either by owning it or by obtaining the permission of the sires owner in a siring auction. A CryptoKitty is represented by an identifier and its DNA, from which its features and appearance are derived. 3.1 Data Overview Each trace in the CryptoKitties log captures the events from the life of a single CryptoKitty. Each trace has the following attributes: concept:name (xs:string) - The identifier of the CryptoKitty matronId (xs:string) - The identifier of the CryptoKittys matron sireId (xs:string) - The identifier of the CryptoKittys sire genes (xs:int) - The CryptoKittys DNA In addition, each event has a set of standard attributes: concept:name (xs:string) - The class of the event time:timestamp (xs:date) - The timestamp of the block that included the event lifecycle:transition (xs:string) - The lifecycle transition of each event, for all events set to Completed by default. This attribute exists to ensure compatibility with XES-certified tools blockNumber (xs:int) - The number of the block that included the event transactionIndex (xs:int) - The index of the transaction that included the event logIndex (xs:int) - The index of the log that included the event The following events can occur during the life of a CrypotKitty: Is Born - The birth of a CryptoKitty owner (xs:string) - The owner of the CryptoKitty Conceive as Matron - The CryptoKitty becomes pregnant sireId (xs:string) - The id of the CryptoKitty that is the sire Conceive as Sire - The CryptoKitty contributes to the pregnancy of a matron matronId (xs:string) - The id of the CryptoKitty that is the matron Give Birth as Matron - The CryptoKitty becomes the matron of another CryptoKitty kittyId (xs:string) - The id of the CryptoKitty that was born sireId (xs:string) - The id of the CryptoKitty that is the sire Give Birth as Sire - The CryptoKitty becomes the sire of another CryptoKitty kittyId (xs:string) - The id of the CryptoKitty that was born matronId (xs:string) - The id of the CryptoKitty that is the matron Put Up for Sale Auction - The owner wants to sell the CryptoKitty startingPrice (xs:int) - The price (in wei) at the beginning of the auction endingPrice (xs:int) - The price (in wei) at which the auction will end duration (xs:int) - The duration for which the auction is running Complete Sale Auction - The sale auction is successfully completed totalPrice (xs:int) - The price paid for the CryptoKitty winner (xs:string) - The new owner of the CryptoKitty Cancel Sale Auction - The sale auction is aborted Put Up for Siring Auction - The owner offers his or her CryptoKitty for siring startingPrice (xs:int) - The price (in wei) at the beginning of the auction endingPrice (xs:int) - The price (in wei) at which the auction will end duration (xs:int) - The duration for which the auction is running Complete Siring Auction - The siring auction is successfully completed totalPrice (xs:int) - The price paid for the CryptoKitty winner (xs:string) - The owner of the matron who is looking for a sire Cancel Siring Auction - The siring auction is aborted Is Transferred - The ownership of a CryptoKitty changes from (xs:string) - The previous owner of the CryptoKitty to (xs:string) - The new owner of the CryptoKitty 3.2 Preliminary Analysis We presented a preliminary analysis of CryptoKitties in [1] where we extracted event logs for two short time windows in the CryptoKitties lifecycle, the genesis log covering the period after DApp creation and the everyday log stemming from a later period after the DApp became popular. In the analysis, we used process discovery to contrast the DApps behavior in these two periods. We showed how the CryptoKitty developer initially generated a set of CryptoKitties that were later sold to DApp users who bred and traded CryptoKitties. In contrast to these two logs, the event log provided on this page contains data about all CryptoKitty events that occurred in between blocks 4605167 (the creation block) and 12243999 (the block at which data extraction finished). References [1] C. Klinkm端ller, A. Ponomarev, A.B. Tran, I. Weber, W. van der Aalst: Mining blockchain processes (2019): Extracting process mining data from blockchain applications. In: International Conference on Business Process Management (Blockchain Forum). "],["chickenhunt.html", "4 ChickenHunt 4.1 Data Overview 4.2 Preliminary Analysis", " 4 ChickenHunt DApp Homepage: https://chickenhunt.io/ DApp Source Code: available on etherscan.io ELF Script: ChickenHunt.ethql Event Log: TODO ChickenHunt is an Ethereum-based game in which players can own and develop their character, a hunter. The hunters can hunt chicken or attack other hunters and this way collect chicken which can be converted into Ether. A hunters abilities are determined by the consitution of the pets, items and depot that the hunter owns. To improve the hunters abilities, players can upgrade items, pets, and depot. Through such investments, players also earn shares which they can cash out or transfer to other players and accounts. 4.1 Data Overview Each trace in the ChickenHunt log captures the events that occur during the game of a ChickenHunt player, i.e., the actions that a ChickenHunt player takes or is part of when playing the game. Each trace has the following attributes: concept:name (xs:string) - The address of the ChickenHunt player In addition, each event has a set of standard attributes: concept:name (xs:string) - The class of the event time:timestamp (xs:date) - The timestamp of the block that included the event lifecycle:transition (xs:string) - the lifecycle transition of each event, for all events set to Completed by default. This attribute exists to ensure compatibility with XES-certified tools blockNumber (xs:int) - The number of the block that included the event transactionIndex (xs:int) - The index of the transaction that included the event logIndex (xs:int) - The index of the log that included the event The following events can occur during the a players game: Join ChickenHunt - The player joins the game Receive Ethereum from Altar - The player receives Ethereum based on the number of chicken that her or she brought to the altar altarRecord (xs:int) - The period for which the Ethereum is paid out ethereum (xs:int) - The amount of Ether that the player receives Bring Chicken to Altar - The player brings hunted chicken to the altar altarRecord (xs:int) - The period in which the chicken where brought to the altar chicken (xs:int) - The number of chicken Attack Hunter - The player attacks another player to steal chicken defender (xs:string) - The player that gets attacked booty (xs:int) - The number of chicken that were stolen Suffer an Attack - The player must defend against an attack by another player attacker (xs:string) - The player that is attacking booty (xs:int) - The number of chicken that were lost to the attacker Buy Item - The player purchases an item that improves his abilities seller (xs:string) - The account that sells the item item (xs:int) - The id of the item class that the player purchased cost (xs:int) - The amount paid for the item Sell Item - The player sells an item buyer (xs:string) - The account that purchased the item item (xs:int) - The id of the item class that the player purchased cost (xs:int) - The amount paid for the item Upgrade Hunter - The player improves the abilities of his or her hunter attribute (xs:string) - The attribute of the hunter that is improved amount (xs:int) - The amount by which the attribute is increased Upgrade Depot - The player improves his or her depot amount (xs:int) - The amount by which the depot is increased Upgrade Pet - The player improves the abilities of one of his or her pets pet (xs:int) - The index of the pet whose abilities are improved amount (xs:int) - The amount by which the pets abilities are improved Buy Store - The player buys a store from another player seller (xs:string) - The player who sells the store cost (xs:int) - The amount paid for the store Sell Store - The player sells a store to another player buyer (xs:string) - The player who buys the store cost (xs:int) - The amount paid for the store Redeem Shares - The player (or the game) cashes out shares shares (xs:int) - The shares that are cashed out dividends (xs:int) - The dividends received Transfer Shares - The player (or the game) transfers shares to another player shares (xs:int) - The shares that are transferred buyer (xs:string) - The player that receives the shares Receive Shares - The player receives shares from the game or another player shares (xs:int) - The shares that are received seller (xs:string) - The contract the pays out the shares Receive Shares Approval - The player receives approval to spend shares of another account owner (xs:string) - The owner of the shares shares (xs:int) - The shares that are approved for spending Provide Shares Approval - The player allows another player to spend hhis or her shares spender (xs:string) - The nominated spender for the shares shares (xs:int) - The shares that are approved for spending 4.2 Preliminary Analysis TODO "]]
