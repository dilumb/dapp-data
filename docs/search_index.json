[["index.html", "A Collection of DApp Event Logs Overview", " A Collection of DApp Event Logs Overview This is a repository of event logs of decentralized applications (DApps) deployed on public blockchain networks. The event logs contain historic information about events that occurred during the execution of the DApps. Currently, the collection contains logs for the following Ethereum-based DApps: Augur: a prediction and betting marketplace; Forsage: an investment application, which turns out to be a PONZI scheme; CryptoKitties: a game where virtual cats can be bred and traded as assets; and ChickenHunt: a game for hunting chickens. All event logs from this collection follow the IEEE XES standard and were extracted using the Ethereum Logging Framework (ELF). In addition to the event log data, this website provides a description of the data in the event logs, pointers to DApp documentations, links to ELF scripts used for data extraction, and insights obtained from a preliminary analyses for each DApp event log. This collection is part of our work on process mining for blockchain-based applications. Details can be found in the following publications: C. Klinkm端ller, A. Ponomarev, A.B. Tran, I. Weber, W. van der Aalst: Mining blockchain processes (2019): Extracting process mining data from blockchain applications. In: International Conference on Business Process Management (Blockchain Forum). C. Klinkm端ller, I. Weber, A. Ponomarev, A.B. Tran, W. van der Aalst (2019): Efficient logging for blockchain applications. https://arxiv.org/abs/2001.10281 R. Hobeck, C. Klinkm端ller, H.M.N.D. Bandara, I. Weber and W. Van der Aalst (2021): Process Mining on Blockchain Data: A Case Study of Augur. In: International Conference on Business Process Management. "],["augur.html", "1 Augur 1.1 Data Overview 1.2 Preliminary Analysis", " 1 Augur DApp Homepage: https://augur.net DApp Source Code: https://github.com/AugurProject/augur-core ELF Script: Augur.ethql Event Log: Augur.xes Process: Augur.bpmn Augur is a betting platform and prediction marketplace that is implemented as a set of smart contracts on the public Ethereum blockchain. Augurs white paper characterizes the mechanics of a prediction and betting market: individuals can speculate on the outcomes of future events; those who forecast the outcome correctly win money, and those who forecast incorrectly lose money. As a betting market organized on Ethereum, the developers claim that Augur bypasses disadvantages of traditional betting markets, such as trusted market operator and limited participation. 1.1 Data Overview 1.1.1 Process Notion 1.1.2 Trace Attributes Attribute Type Description universe string description string extraInfo string type string minPrice int maxPrice int blockNumber int time:timestamp date 1.1.3 Event Attributes Attribute Type Description Event Classes 1.2 Preliminary Analysis "],["forsage.html", "2 Forsage 2.1 Data Overview 2.2 Preliminary Analysis", " 2 Forsage DApp Homepage: https://forsage.io DApp Source Code: available on etherscan.io ELF Script: Forsage.ethql Event Log: TODO 2.1 Data Overview Process Notion Trace Attributes Attribute Type Description concept:name xs:string the address of the user Event Attributes Event Class Description Register As User Reinvest Matrix-1 Reinvest Matrix-2 Upgrade Matrix-1 Upgrade Matrix-2 New User-Place Matrix-1 New User-Place Matrix-2 Missed Eth-Receive Matrix-1 Missed Eth-Receive Matrix-2 Received Extra Eth-Dividends Matrix-1 Recieved Extra Eth-Dividends Matrix-2 Attribute Type Description Event Classes 2.2 Preliminary Analysis "],["cryptokitties.html", "3 CryptoKitties 3.1 Data Overview 3.2 Preliminary Analysis", " 3 CryptoKitties DApp Homepage: https://www.cryptokitties.co DApp Source Code: available on etherscan.io ELF Script: CryptoKitties.ethql Event Log: TODO According to the DApps website, CryptoKitties is a game centered around breedable, collectible, and oh-soadorable creatures we call CryptoKitties. While not Ethereums most serious application, it is a well-known example of a DApp (that is primarily based on smart contracts), has been used heavily at times (likely due some of the kitties being sold for thousands of dollars), and has been in operation since December 2017. A CryptoKitty is the Ethereum version of a Tamagotchi. It is a digital asset owned by an Ethereum account, it can be traded, and it can breed new CryptoKitties. To breed a new CryptoKitty, the owner of a CryptoKitty can start a siring process. That is, the owners CryptoKitty acts as the matron that gives birth to the new CryptoKitty which will then be owned by the matrons owner. However, the owner must have access to a second cat, the sire, either by owning it or by obtaining the permission of the sires owner in a siring auction. A CryptoKitty is represented by an identifier and its DNA, from which its features and appearance are derived. 3.1 Data Overview Each trace in the CryptoKitties log captures the events from the life of a single CryptoKitty. Each trace has the following attributes: concept:name (xs:string) - the identifier of the CryptoKitty matronId (xs:string) - the identifier of the CryptoKittys matron sireId (xs:string) - the identifier of the CryptoKittys sire genes (xs:int) - the CryptoKittys DNA In addition, each event has a set of standard attributes: concept:name (xs:string) - the class of the event time:timestamp (xs:date) - the timestamp of the block that included the event lifecycle:transition (xs:string) - the lifecycle transition of each event, for all events set to Completed by default. This attribute exists to ensure compatibility with XES-certified tools blockNumber (xs:int) - the number of the block that included the event transactionIndex (xs:int) - the index of the transaction that included the event , logIndex (xs:int) - the number of the block that included the event The following events can occur during the life of a CrypotKitty: Is Born - The birth of a CryptoKitty owner (xs:string) - the owner of the CryptoKitty Conceive as Matron - The CryptoKitty becomes pregnant sireId (xs:string) - the id of the CryptoKitty that is the sire Conceive as Sire - The CryptoKitty contributes to the pregnancy of a matron matronId (xs:string) - the id of the CryptoKitty that is the matron Give Birth as Matron - The CryptoKitty becomes the matron of another CryptoKitty kittyId (xs:string) - the id of the CryptoKitty that was born sireId (xs:string) - the id of the CryptoKitty that is the sire Give Birth as Sire - The CryptoKitty becomes the sire of another CryptoKitty kittyId (xs:string) - the id of the CryptoKitty that was born matronId (xs:string) - the id of the CryptoKitty that is the matron Put Up for Sale Auction - The owner wants to sell the CryptoKitty startingPrice (xs:int) - the price (in wei) at the beginning of the auction endingPrice (xs:int) - the price (in wei) at which the auction will end duration (xs:int) - the duration for which the auction is running Complete Sale Auction - The sale auction is successfully completed totalPrice (xs:int) - the price paid for the CryptoKitty winner (xs:string) - the new owner of the CryptoKitty Cancel Sale Auction - The sale auction is aborted Put Up for Siring Auction - The owner offers his or her CryptoKitty for siring startingPrice (xs:int) - the price (in wei) at the beginning of the auction endingPrice (xs:int) - the price (in wei) at which the auction will end duration (xs:int) - the duration for which the auction is running Complete Siring Auction - The siring auction is successfully completed totalPrice (xs:int) - the price paid for the CryptoKitty winner (xs:string) - the owner of the matron who is looking for a sire Cancel Siring Auction - The siring auction is aborted Is Transferred - The ownership of a CryptoKitty changes from (xs:string) - the previous owner of the CryptoKitty to (xs:string) - the new owner of the CryptoKitty 3.2 Preliminary Analysis We presented a preliminary analysis of CryptoKitties in [1] where we extracted event logs for two short time windows in the CryptoKitties lifecycle, the genesis log covering the period after DApp creation and the everyday log stemming from a later period after the DApp became popular. In the analysis, we used process discovery to contrast the DApps behavior in these two periods. We showed how the CryptoKitty developer initially generated a set of CryptoKitties that were later sold to DApp users who bred and traded CryptoKitties. In contrast to these two logs, the event log provided on this page contains data about all CryptoKitty events that occurred in between blocks 4605167 (the creation block) and 12243999 (the block at which data extraction finished). References [1] C. Klinkm端ller, A. Ponomarev, A.B. Tran, I. Weber, W. van der Aalst: Mining blockchain processes (2019): Extracting process mining data from blockchain applications. In: International Conference on Business Process Management (Blockchain Forum). "],["chickenhunt.html", "4 ChickenHunt 4.1 Data Overview 4.2 Preliminary Analysis", " 4 ChickenHunt DApp Homepage: https://chickenhunt.io/ DApp Source Code: available on etherscan.io ELF Script: ChickenHunt.ethql Event Log: TODO 4.1 Data Overview 4.1.1 Process Notion 4.1.2 Trace Attributes Attribute Type Description 4.1.3 Event Attributes Attribute Type Description Event Classes 4.2 Preliminary Analysis "]]
